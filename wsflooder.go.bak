package main

import (
	"log"
	"net/http"
	"time"
	"fmt"
	"sync"
	"net"
//	"syscall"
	"runtime"
	"io/ioutil"
	"crypto/tls"
	"net/url"
	"os"
	"errors"
	"os/signal"
	"github.com/gorilla/websocket"
)
var dstHost, dstOrigin string
func main() {
	l := log.New(os.Stdout, "[MOTHER THREAD]: ", log.Ldate | log.Ltime | log.Lmicroseconds)
	defer l.Print("Stopped!")
	l.Print("Started!")
	c := make( chan bool, 1 )
	u := &url.URL {
		Scheme: "ws",
		Host: "csgopuzo.com:7703",
        Path: "/socket.io/",
		RawQuery: "EIO=3&transport=websocket",
	}
	dstOrigin = "http://csgopuzo.com"
	dstHost = "csgopuzo.com:7703"
//	dstHost = "csgopuzo.com:7703"	// 7703 port is a chat
//	dstHost = "csgopuzo.com:7701"	// 7701 port is a roulette

/*
 *	cURL zone:

curl 'http://csgopuzo.com:7703/socket.io/?EIO=3&transport=polling' -H 'Host: csgopuzo.com:7703' -H 'User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:51.0) Gecko/20100101 Firefox/51.0' -H 'Accept-Language: en-US,en;q=0.5' --compressed -H 'Referer: http://csgopuzo.com/' -H 'Origin: http://csgopuzo.com' -H 'Cookie: lastupdate=1485879520' -H 'DNT: 1' -H 'Connection: keep-alive' -H 'Pragma: no-cache' -H 'Cache-Control: no-cache'

*/


	itr := make(chan os.Signal)
	signal.Notify( itr, os.Interrupt )
	w := &sync.WaitGroup{}
//	max_cpu := runtime.NumCPU()
	max_cpu := 1
	max_workers := uint16( 1 )
	runtime.GOMAXPROCS(max_cpu)

//	rl := &syscall.Rlimit{}
//	if e := syscall.Getrlimit(syscall.RLIMIT_NOFILE, rl); e == nil {
//		l.Print( "Finded system limits: ", rl )
//		rl.Cur = 10240
//		rl.Max = 10240
//		if e = syscall.Setrlimit(syscall.RLIMIT_NOFILE, rl); e == nil {
//			if e := syscall.Getrlimit(syscall.RLIMIT_NOFILE, rl); e == nil {
//				l.Print( "Rlimit updated: ", rl )
//			} else { l.Printf( "Error getting #2 rlimit! (%s)", e ); return }
//		} //else { l.Printf( "Error setting rlimit! (%s)", e ); return }
//	} else { l.Printf( "Error in getting rlimit! (%s)", e ); return }
//
//	var ips []net.Addr
//	if i, e := net.InterfaceByName("eth0"); e == nil {
//		if ips, e = i.Addrs(); e == nil {
//			if len( ips ) >= max_cpu+2 {
//				l.Print( "I will use this addresses: ", ips[2:10] )
//			} else { l.Print("I wil use systems ONE IP") }
//		} else {
//			l.Printf( "I can't get addresses from interface! (%s)", e )
//			return
//		}
//	} else {
//		l.Printf( "I can't get interface by name! (%s)", e )
//		return
//	}

	//	Worker spawning
	for i:=0; i<max_cpu; i++ {
		go func( i int ) {
//			var a *net.TCPAddr
//			if ip, _, e := net.ParseCIDR( ips[2+i].String() ); e == nil {
//				if a, e = net.ResolveTCPAddr( "tcp4", ip.String() + ":0" ); e != nil {
//					l.Printf( "Promblem with resolving TCPAddr for goroutine. Using system IP (%s)", e )
//				}
//			} else { l.Printf( "Problem with parsing CIDR! (%s)", e ) }

			for k:=uint16(0); k<max_workers; k++ {
			//	go worker( c, u, i, k, w, a )
				go worker( c, u, i, k, w, nil )
				time.Sleep( time.Millisecond * 500 )
			}
		}(i)
	}

	//go worker( c, u, 0, 0, w )

	for {
		select {
		case <-itr:
			l.Print("Received INTERRUPT from kernel!!!")
			close(c)
			l.Print("DROP signals have been sended to workers!")
			w.Wait()
			return
		}
	}
	os.Exit(0)
}


type Worker struct {
	ch chan bool
	url *url.URL
	cpu, thd uint8
	wg *sync.WaitGroup
	ip *net.TCPAddr
}




func worker(c chan bool, u *url.URL, nc int, nt uint16, w *sync.WaitGroup, a *net.TCPAddr ) {
	defer w.Done()
	w.Add(1)
	l := log.New(os.Stdout, fmt.Sprintf( "[Worker #%d-%d] ", nc, nt ), log.Ldate | log.Ltime | log.Lmicroseconds)
	defer l.Print("INF: Worker stopped!")
	l.Print( "INF: Worker has been initialized!" )
	for {
		select {
		case cm:=<-c:
			switch(cm) {
			case false:
				l.Print("Worker has been blocked by DROP signal")
				return
			}
		default:
			l.Print(" I'm spawning connector ...")
			if ! connector(c, u, l, a) {
				l.Printf( "I have promblems with my connector. Respawning it ..." )
				time.Sleep(time.Second * 5)
			} else {
				l.Print("I recieve DROP signal!")
				return
			}
		}
	}
}


func (w *Worker) Spawn() (error) {
	w.wg.Add(1)
	l := log.New( os.Stdout, "Worker #" + string(w.cpu) + "-" + string(w.thd) + " ", log.Ldate | log.Ltime | log.Lmicroseconds )
	l.Println("INF: Worker has been STARTED")
	defer w.wg.Done()
	defer l.Println("INF: Worker has been STOPPED")

// Old "connector"
	hd := &http.Header{}
	hd.Set( "Host", dstHost )
	hd.Set( "Origin", dstOrigin )
	hd.Set( "Referer", dstOrigin )
	hd.Set( "User-Agent", "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:48.0) Gecko/20100101 Firefox/48.0" )
	// &tls.Config{InsecureSkipVerify: true}

	var wd *websocket.Dialer
	if a == nil {
		wd = &websocket.Dialer{
			Proxy: http.ProxyFromEnvironment,
			TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
		}
	} else {
		nd := &neto.Dialer{ LocalAddr: a }
		wd = &websocket.Dialer{ NetDial: func( n, a string ) ( net.Conn, error ) { return net.Dial( "tcp", a ) } }
	}

	l.Println("INF: websocket dialer has been inited! Connecting to dst ...")
	cn, _, e := wd.Dial( w.url.String(), hd )
	if e != nil {
		errors.New( "ERR: Connection failed! | ", e )
	} else {
		l.Println("INF: Connected to DST!")
	}
	defer l.Println("INF: Disconnected from DST!")
	defer cn.Close()

	//

	for {
		select {
		case c:=<-w.ch:
			if c == false { defer cn.Close(); l.Println("Catched DROP signal. Stopping ..."); return nil }
		default:

		}
	}
}


func connector(ch chan bool, u *url.URL, l *log.Logger, a *net.TCPAddr) ( bool ) {
	h := make( http.Header )
	h.Set("Origin", dstOrigin)
	h.Set("Host", dstHost)
	h.Set("Referer", dstOrigin)
	h.Set("User-Agent", "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:48.0) Gecko/20100101 Firefox/48.0")
	// &tls.Config{InsecureSkipVerify: true}

	var wd *websocket.Dialer
	if a == nil {
		wd = &websocket.Dialer {
			Proxy: http.ProxyFromEnvironment,
			TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
		}
	} else {
		nd := &net.Dialer { LocalAddr: a }
		wd = &websocket.Dialer {
			NetDial: func( n, a string ) ( net.Conn, error ) {
				if cn, e := nd.Dial("tcp", a); e == nil {
					return cn, nil
				} else { return nil, e }
			},
		}
	}

	l.Printf("Connector initialized! Connecting to %s ...", u.Host)

	c, _, e := wd.Dial(u.String(), h)
	if e == nil {
		l.Print("Connection established successfully!")
	} else {
		l.Printf("Connection failed! (%s)", e);
		return false
	}
	defer l.Printf( "Disconnected from %s successfully!", u.Host )

	if c == nil {
		l.Print( "I have very strange situation! Kill me, please!" )
		return false
	}
	defer c.Close() // For only established connection!


	wsping := time.NewTicker( time.Second * 1 )
	defer wsping.Stop()

	for {
		select {
		case <-wsping.C:
			if e := c.WriteMessage( websocket.TextMessage, []byte("2") ); e != nil {
				defer c.Close()
				l.Printf( "Something wrong in pinger! (%s)", e )
				return false
			}
		case cm := <-ch:
			l.Println("test message from connector by nonDROP signal")
			switch(cm) {
			case false:
				defer c.Close()
				defer wsping.Stop()
				l.Print("Connector received DROP signal from worker!")
				return true
			default:
				l.Println("test message from connector by nonDROP signal")
			}
		default: // reader
			l.Println("SPAMER if non block")
			var m []byte
			if _, r, e := c.NextReader() ; e == nil {
				if m, e =	ioutil.ReadAll(r); e == nil {
					if len(m) == 0 { l.Print("Readed empty message"); continue }
				} else {
					defer c.Close()
					l.Println( "Error in reading message from IO reader: ", e )
					return false
				}
			} else {
				defer c.Close()
				l.Println( "Error in reading message: ", e )
				return false
			}
		// if all ifs are OK then we have valid message
			switch(m[0]) {
			case '3':
				l.Print("Received PONG from server")
				if e = c.WriteMessage( websocket.TextMessage, []byte("5") ); e != nil {
					l.Println( "Some errors after upgrade sending: ", e ); return false
				} else { l.Println( "IO UPGRADE has been sended!" ) }
			case '4':
				l.Printf( "Meassage from server: %s", m )
			default:
				l.Printf( "Undefined message from server! (%s)", m )
				if e = c.WriteMessage( websocket.TextMessage, []byte("2") ); e != nil {
					l.Println( "Some errors after ping sending: ", e ); return false
				} else { l.Println( "IO PING has been sended!" ) }
			}



//		//	Old shit:
//			l.Println("SPAMER if non block")
//			if _, m, e := c.ReadMessage(); e == nil {
//				if len(m) == 0 {
//					defer c.Close()
//					l.Print("Message has zero length");
//					return false
//				} else { l.Print(string(m)) }
////				} else {
////					for z:=0 ; z<10; z++ {
////						c.WriteMessage( websocket.TextMessage, m )
////					}
////				}
//
//				switch( m[0] ) {
//				case '3':
//					l.Print("Received PONG from server")
//					if e = c.WriteMessage( websocket.TextMessage, []byte("5") ); e != nil {
//						l.Println( "Some errors after upgrade sending: ", e ); return false
//					} else { l.Println( "IO UPGRADE has been sended!" ) }
//				case '4':
//					l.Printf( "Meassage from server: %s", m )
//				default:
//					l.Printf( "Undefined message from server! (%s)", m )
//					if e = c.WriteMessage( websocket.TextMessage, []byte("2") ); e != nil {
//						l.Println( "Some errors after ping sending: ", e ); return false
//					} else { l.Println( "IO PING has been sended!" ) }
//				}
//			} else {
//				defer c.Close()
//				l.Printf( "Something wrong in reader! (%s)", e )
//				return false
//			}
		}
	}
}
